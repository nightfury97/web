#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Shop_data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="H_Tshop")]
	public partial class DataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCake_Image(Cake_Image instance);
    partial void UpdateCake_Image(Cake_Image instance);
    partial void DeleteCake_Image(Cake_Image instance);
    partial void InsertCart(Cart instance);
    partial void UpdateCart(Cart instance);
    partial void DeleteCart(Cart instance);
    partial void InsertCart_Item(Cart_Item instance);
    partial void UpdateCart_Item(Cart_Item instance);
    partial void DeleteCart_Item(Cart_Item instance);
    partial void InsertChef(Chef instance);
    partial void UpdateChef(Chef instance);
    partial void DeleteChef(Chef instance);
    partial void InsertCOMMENT(COMMENT instance);
    partial void UpdateCOMMENT(COMMENT instance);
    partial void DeleteCOMMENT(COMMENT instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertCustomer_Payment_Method(Customer_Payment_Method instance);
    partial void UpdateCustomer_Payment_Method(Customer_Payment_Method instance);
    partial void DeleteCustomer_Payment_Method(Customer_Payment_Method instance);
    partial void InsertDriver(Driver instance);
    partial void UpdateDriver(Driver instance);
    partial void DeleteDriver(Driver instance);
    partial void InsertLoginSystem(LoginSystem instance);
    partial void UpdateLoginSystem(LoginSystem instance);
    partial void DeleteLoginSystem(LoginSystem instance);
    partial void InsertManager(Manager instance);
    partial void UpdateManager(Manager instance);
    partial void DeleteManager(Manager instance);
    partial void InsertPayment_Method(Payment_Method instance);
    partial void UpdatePayment_Method(Payment_Method instance);
    partial void DeletePayment_Method(Payment_Method instance);
    partial void InsertCake_Type(Cake_Type instance);
    partial void UpdateCake_Type(Cake_Type instance);
    partial void DeleteCake_Type(Cake_Type instance);
    partial void InsertCake(Cake instance);
    partial void UpdateCake(Cake instance);
    partial void DeleteCake(Cake instance);
    #endregion
		
		public DataDataContext() : 
				base(global::Shop_data.Properties.Settings.Default.H_TshopConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public DataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Cake_Image> Cake_Images
		{
			get
			{
				return this.GetTable<Cake_Image>();
			}
		}
		
		public System.Data.Linq.Table<Cart> Carts
		{
			get
			{
				return this.GetTable<Cart>();
			}
		}
		
		public System.Data.Linq.Table<Cart_Item> Cart_Items
		{
			get
			{
				return this.GetTable<Cart_Item>();
			}
		}
		
		public System.Data.Linq.Table<Chef> Chefs
		{
			get
			{
				return this.GetTable<Chef>();
			}
		}
		
		public System.Data.Linq.Table<COMMENT> COMMENTs
		{
			get
			{
				return this.GetTable<COMMENT>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<Customer_Payment_Method> Customer_Payment_Methods
		{
			get
			{
				return this.GetTable<Customer_Payment_Method>();
			}
		}
		
		public System.Data.Linq.Table<Driver> Drivers
		{
			get
			{
				return this.GetTable<Driver>();
			}
		}
		
		public System.Data.Linq.Table<LoginSystem> LoginSystems
		{
			get
			{
				return this.GetTable<LoginSystem>();
			}
		}
		
		public System.Data.Linq.Table<Manager> Managers
		{
			get
			{
				return this.GetTable<Manager>();
			}
		}
		
		public System.Data.Linq.Table<Payment_Method> Payment_Methods
		{
			get
			{
				return this.GetTable<Payment_Method>();
			}
		}
		
		public System.Data.Linq.Table<Cake_Type> Cake_Types
		{
			get
			{
				return this.GetTable<Cake_Type>();
			}
		}
		
		public System.Data.Linq.Table<Cake> Cakes
		{
			get
			{
				return this.GetTable<Cake>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.add_account")]
		public int add_account([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="VarChar(50)")] string iD, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(255)")] string pass, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> rule)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, pass, rule);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.add_Cake")]
		public int add_Cake([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Char(7)")] string type, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> price, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Float")] System.Nullable<double> dis, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string des)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), name, type, price, dis, des);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.add_Cake_Image")]
		public int add_Cake_Image([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="Char(5)")] string iD, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(MAX)")] string img)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, img);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.check_login")]
		public ISingleResult<check_loginResult> check_login([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="VarChar(50)")] string iD, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(255)")] string pass)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, pass);
			return ((ISingleResult<check_loginResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.isRule", IsComposable=true)]
		public System.Nullable<int> isRule([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="VarChar(50)")] string iD, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(32)")] string pass)
		{
			return ((System.Nullable<int>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, pass).ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.add_customer")]
		public int add_customer([global::System.Data.Linq.Mapping.ParameterAttribute(Name="ID", DbType="VarChar(50)")] string iD, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(20)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Char(12)")] string phone, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(30)")] string email, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(MAX)")] string address, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(32)")] string pass)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), iD, name, phone, email, address, pass);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cake_Image")]
	public partial class Cake_Image : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Imange_ID;
		
		private string _Cake_ID;
		
		private string _Cake_Image1;
		
		private EntityRef<Cake> _Cake;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnImange_IDChanging(int value);
    partial void OnImange_IDChanged();
    partial void OnCake_IDChanging(string value);
    partial void OnCake_IDChanged();
    partial void OnCake_Image1Changing(string value);
    partial void OnCake_Image1Changed();
    #endregion
		
		public Cake_Image()
		{
			this._Cake = default(EntityRef<Cake>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Imange_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Imange_ID
		{
			get
			{
				return this._Imange_ID;
			}
			set
			{
				if ((this._Imange_ID != value))
				{
					this.OnImange_IDChanging(value);
					this.SendPropertyChanging();
					this._Imange_ID = value;
					this.SendPropertyChanged("Imange_ID");
					this.OnImange_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cake_ID", DbType="Char(5)")]
		public string Cake_ID
		{
			get
			{
				return this._Cake_ID;
			}
			set
			{
				if ((this._Cake_ID != value))
				{
					if (this._Cake.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCake_IDChanging(value);
					this.SendPropertyChanging();
					this._Cake_ID = value;
					this.SendPropertyChanged("Cake_ID");
					this.OnCake_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Cake_Image", Storage="_Cake_Image1", DbType="NVarChar(MAX)")]
		public string Cake_Image1
		{
			get
			{
				return this._Cake_Image1;
			}
			set
			{
				if ((this._Cake_Image1 != value))
				{
					this.OnCake_Image1Changing(value);
					this.SendPropertyChanging();
					this._Cake_Image1 = value;
					this.SendPropertyChanged("Cake_Image1");
					this.OnCake_Image1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cake_Cake_Image", Storage="_Cake", ThisKey="Cake_ID", OtherKey="Cake_ID", IsForeignKey=true)]
		public Cake Cake
		{
			get
			{
				return this._Cake.Entity;
			}
			set
			{
				Cake previousValue = this._Cake.Entity;
				if (((previousValue != value) 
							|| (this._Cake.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cake.Entity = null;
						previousValue.Cake_Images.Remove(this);
					}
					this._Cake.Entity = value;
					if ((value != null))
					{
						value.Cake_Images.Add(this);
						this._Cake_ID = value.Cake_ID;
					}
					else
					{
						this._Cake_ID = default(string);
					}
					this.SendPropertyChanged("Cake");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cart")]
	public partial class Cart : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Customer_ID;
		
		private int _Cart_ID;
		
		private string _Customer_Payment_ID;
		
		private System.Nullable<System.DateTime> _Payment_time;
		
		private string _Shipping_Address;
		
		private string _Customer_Requirements;
		
		private System.Nullable<int> _Cart_Status;
		
		private string _Driver_ID;
		
		private EntitySet<Cart_Item> _Cart_Items;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Driver> _Driver;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomer_IDChanging(string value);
    partial void OnCustomer_IDChanged();
    partial void OnCart_IDChanging(int value);
    partial void OnCart_IDChanged();
    partial void OnCustomer_Payment_IDChanging(string value);
    partial void OnCustomer_Payment_IDChanged();
    partial void OnPayment_timeChanging(System.Nullable<System.DateTime> value);
    partial void OnPayment_timeChanged();
    partial void OnShipping_AddressChanging(string value);
    partial void OnShipping_AddressChanged();
    partial void OnCustomer_RequirementsChanging(string value);
    partial void OnCustomer_RequirementsChanged();
    partial void OnCart_StatusChanging(System.Nullable<int> value);
    partial void OnCart_StatusChanged();
    partial void OnDriver_IDChanging(string value);
    partial void OnDriver_IDChanged();
    #endregion
		
		public Cart()
		{
			this._Cart_Items = new EntitySet<Cart_Item>(new Action<Cart_Item>(this.attach_Cart_Items), new Action<Cart_Item>(this.detach_Cart_Items));
			this._Customer = default(EntityRef<Customer>);
			this._Driver = default(EntityRef<Driver>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_ID", DbType="VarChar(50)")]
		public string Customer_ID
		{
			get
			{
				return this._Customer_ID;
			}
			set
			{
				if ((this._Customer_ID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomer_IDChanging(value);
					this.SendPropertyChanging();
					this._Customer_ID = value;
					this.SendPropertyChanged("Customer_ID");
					this.OnCustomer_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cart_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Cart_ID
		{
			get
			{
				return this._Cart_ID;
			}
			set
			{
				if ((this._Cart_ID != value))
				{
					this.OnCart_IDChanging(value);
					this.SendPropertyChanging();
					this._Cart_ID = value;
					this.SendPropertyChanged("Cart_ID");
					this.OnCart_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_Payment_ID", DbType="Char(7)")]
		public string Customer_Payment_ID
		{
			get
			{
				return this._Customer_Payment_ID;
			}
			set
			{
				if ((this._Customer_Payment_ID != value))
				{
					this.OnCustomer_Payment_IDChanging(value);
					this.SendPropertyChanging();
					this._Customer_Payment_ID = value;
					this.SendPropertyChanged("Customer_Payment_ID");
					this.OnCustomer_Payment_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Payment_time", DbType="DateTime")]
		public System.Nullable<System.DateTime> Payment_time
		{
			get
			{
				return this._Payment_time;
			}
			set
			{
				if ((this._Payment_time != value))
				{
					this.OnPayment_timeChanging(value);
					this.SendPropertyChanging();
					this._Payment_time = value;
					this.SendPropertyChanged("Payment_time");
					this.OnPayment_timeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Shipping_Address", DbType="NVarChar(50)")]
		public string Shipping_Address
		{
			get
			{
				return this._Shipping_Address;
			}
			set
			{
				if ((this._Shipping_Address != value))
				{
					this.OnShipping_AddressChanging(value);
					this.SendPropertyChanging();
					this._Shipping_Address = value;
					this.SendPropertyChanged("Shipping_Address");
					this.OnShipping_AddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_Requirements", DbType="NVarChar(200)")]
		public string Customer_Requirements
		{
			get
			{
				return this._Customer_Requirements;
			}
			set
			{
				if ((this._Customer_Requirements != value))
				{
					this.OnCustomer_RequirementsChanging(value);
					this.SendPropertyChanging();
					this._Customer_Requirements = value;
					this.SendPropertyChanged("Customer_Requirements");
					this.OnCustomer_RequirementsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cart_Status", DbType="Int")]
		public System.Nullable<int> Cart_Status
		{
			get
			{
				return this._Cart_Status;
			}
			set
			{
				if ((this._Cart_Status != value))
				{
					this.OnCart_StatusChanging(value);
					this.SendPropertyChanging();
					this._Cart_Status = value;
					this.SendPropertyChanged("Cart_Status");
					this.OnCart_StatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Driver_ID", DbType="VarChar(50)")]
		public string Driver_ID
		{
			get
			{
				return this._Driver_ID;
			}
			set
			{
				if ((this._Driver_ID != value))
				{
					if (this._Driver.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDriver_IDChanging(value);
					this.SendPropertyChanging();
					this._Driver_ID = value;
					this.SendPropertyChanged("Driver_ID");
					this.OnDriver_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cart_Cart_Item", Storage="_Cart_Items", ThisKey="Cart_ID", OtherKey="Cart_ID")]
		public EntitySet<Cart_Item> Cart_Items
		{
			get
			{
				return this._Cart_Items;
			}
			set
			{
				this._Cart_Items.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Cart", Storage="_Customer", ThisKey="Customer_ID", OtherKey="Customer_ID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Carts.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Carts.Add(this);
						this._Customer_ID = value.Customer_ID;
					}
					else
					{
						this._Customer_ID = default(string);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Driver_Cart", Storage="_Driver", ThisKey="Driver_ID", OtherKey="Driver_ID", IsForeignKey=true)]
		public Driver Driver
		{
			get
			{
				return this._Driver.Entity;
			}
			set
			{
				Driver previousValue = this._Driver.Entity;
				if (((previousValue != value) 
							|| (this._Driver.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Driver.Entity = null;
						previousValue.Carts.Remove(this);
					}
					this._Driver.Entity = value;
					if ((value != null))
					{
						value.Carts.Add(this);
						this._Driver_ID = value.Driver_ID;
					}
					else
					{
						this._Driver_ID = default(string);
					}
					this.SendPropertyChanged("Driver");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cart_Items(Cart_Item entity)
		{
			this.SendPropertyChanging();
			entity.Cart = this;
		}
		
		private void detach_Cart_Items(Cart_Item entity)
		{
			this.SendPropertyChanging();
			entity.Cart = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cart_Item")]
	public partial class Cart_Item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Cake_ID;
		
		private int _Cart_ID;
		
		private System.Nullable<int> _Quantity;
		
		private System.Nullable<double> _Price;
		
		private string _Orther;
		
		private EntityRef<Cart> _Cart;
		
		private EntityRef<Cake> _Cake;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCake_IDChanging(string value);
    partial void OnCake_IDChanged();
    partial void OnCart_IDChanging(int value);
    partial void OnCart_IDChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnPriceChanging(System.Nullable<double> value);
    partial void OnPriceChanged();
    partial void OnOrtherChanging(string value);
    partial void OnOrtherChanged();
    #endregion
		
		public Cart_Item()
		{
			this._Cart = default(EntityRef<Cart>);
			this._Cake = default(EntityRef<Cake>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cake_ID", DbType="Char(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Cake_ID
		{
			get
			{
				return this._Cake_ID;
			}
			set
			{
				if ((this._Cake_ID != value))
				{
					if (this._Cake.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCake_IDChanging(value);
					this.SendPropertyChanging();
					this._Cake_ID = value;
					this.SendPropertyChanged("Cake_ID");
					this.OnCake_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cart_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Cart_ID
		{
			get
			{
				return this._Cart_ID;
			}
			set
			{
				if ((this._Cart_ID != value))
				{
					if (this._Cart.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCart_IDChanging(value);
					this.SendPropertyChanging();
					this._Cart_ID = value;
					this.SendPropertyChanged("Cart_ID");
					this.OnCart_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Float")]
		public System.Nullable<double> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Orther", DbType="NVarChar(MAX)")]
		public string Orther
		{
			get
			{
				return this._Orther;
			}
			set
			{
				if ((this._Orther != value))
				{
					this.OnOrtherChanging(value);
					this.SendPropertyChanging();
					this._Orther = value;
					this.SendPropertyChanged("Orther");
					this.OnOrtherChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cart_Cart_Item", Storage="_Cart", ThisKey="Cart_ID", OtherKey="Cart_ID", IsForeignKey=true)]
		public Cart Cart
		{
			get
			{
				return this._Cart.Entity;
			}
			set
			{
				Cart previousValue = this._Cart.Entity;
				if (((previousValue != value) 
							|| (this._Cart.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cart.Entity = null;
						previousValue.Cart_Items.Remove(this);
					}
					this._Cart.Entity = value;
					if ((value != null))
					{
						value.Cart_Items.Add(this);
						this._Cart_ID = value.Cart_ID;
					}
					else
					{
						this._Cart_ID = default(int);
					}
					this.SendPropertyChanged("Cart");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cake_Cart_Item", Storage="_Cake", ThisKey="Cake_ID", OtherKey="Cake_ID", IsForeignKey=true)]
		public Cake Cake
		{
			get
			{
				return this._Cake.Entity;
			}
			set
			{
				Cake previousValue = this._Cake.Entity;
				if (((previousValue != value) 
							|| (this._Cake.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cake.Entity = null;
						previousValue.Cart_Items.Remove(this);
					}
					this._Cake.Entity = value;
					if ((value != null))
					{
						value.Cart_Items.Add(this);
						this._Cake_ID = value.Cake_ID;
					}
					else
					{
						this._Cake_ID = default(string);
					}
					this.SendPropertyChanged("Cake");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Chef")]
	public partial class Chef : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Chef_ID;
		
		private string _Chef_Name;
		
		private string _Chef_Phone;
		
		private EntityRef<LoginSystem> _LoginSystem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnChef_IDChanging(string value);
    partial void OnChef_IDChanged();
    partial void OnChef_NameChanging(string value);
    partial void OnChef_NameChanged();
    partial void OnChef_PhoneChanging(string value);
    partial void OnChef_PhoneChanged();
    #endregion
		
		public Chef()
		{
			this._LoginSystem = default(EntityRef<LoginSystem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Chef_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Chef_ID
		{
			get
			{
				return this._Chef_ID;
			}
			set
			{
				if ((this._Chef_ID != value))
				{
					if (this._LoginSystem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChef_IDChanging(value);
					this.SendPropertyChanging();
					this._Chef_ID = value;
					this.SendPropertyChanged("Chef_ID");
					this.OnChef_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Chef_Name", DbType="NVarChar(30)")]
		public string Chef_Name
		{
			get
			{
				return this._Chef_Name;
			}
			set
			{
				if ((this._Chef_Name != value))
				{
					this.OnChef_NameChanging(value);
					this.SendPropertyChanging();
					this._Chef_Name = value;
					this.SendPropertyChanged("Chef_Name");
					this.OnChef_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Chef_Phone", DbType="Char(12)")]
		public string Chef_Phone
		{
			get
			{
				return this._Chef_Phone;
			}
			set
			{
				if ((this._Chef_Phone != value))
				{
					this.OnChef_PhoneChanging(value);
					this.SendPropertyChanging();
					this._Chef_Phone = value;
					this.SendPropertyChanged("Chef_Phone");
					this.OnChef_PhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LoginSystem_Chef", Storage="_LoginSystem", ThisKey="Chef_ID", OtherKey="ID", IsForeignKey=true)]
		public LoginSystem LoginSystem
		{
			get
			{
				return this._LoginSystem.Entity;
			}
			set
			{
				LoginSystem previousValue = this._LoginSystem.Entity;
				if (((previousValue != value) 
							|| (this._LoginSystem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LoginSystem.Entity = null;
						previousValue.Chef = null;
					}
					this._LoginSystem.Entity = value;
					if ((value != null))
					{
						value.Chef = this;
						this._Chef_ID = value.ID;
					}
					else
					{
						this._Chef_ID = default(string);
					}
					this.SendPropertyChanged("LoginSystem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.COMMENT")]
	public partial class COMMENT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Comment_ID;
		
		private string _Customer_ID;
		
		private string _Cake_ID;
		
		private System.Nullable<System.DateTime> _Time_comment;
		
		private string _Content;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Cake> _Cake;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnComment_IDChanging(int value);
    partial void OnComment_IDChanged();
    partial void OnCustomer_IDChanging(string value);
    partial void OnCustomer_IDChanged();
    partial void OnCake_IDChanging(string value);
    partial void OnCake_IDChanged();
    partial void OnTime_commentChanging(System.Nullable<System.DateTime> value);
    partial void OnTime_commentChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    #endregion
		
		public COMMENT()
		{
			this._Customer = default(EntityRef<Customer>);
			this._Cake = default(EntityRef<Cake>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Comment_ID
		{
			get
			{
				return this._Comment_ID;
			}
			set
			{
				if ((this._Comment_ID != value))
				{
					this.OnComment_IDChanging(value);
					this.SendPropertyChanging();
					this._Comment_ID = value;
					this.SendPropertyChanged("Comment_ID");
					this.OnComment_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_ID", DbType="VarChar(50)")]
		public string Customer_ID
		{
			get
			{
				return this._Customer_ID;
			}
			set
			{
				if ((this._Customer_ID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomer_IDChanging(value);
					this.SendPropertyChanging();
					this._Customer_ID = value;
					this.SendPropertyChanged("Customer_ID");
					this.OnCustomer_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cake_ID", DbType="Char(5)")]
		public string Cake_ID
		{
			get
			{
				return this._Cake_ID;
			}
			set
			{
				if ((this._Cake_ID != value))
				{
					if (this._Cake.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCake_IDChanging(value);
					this.SendPropertyChanging();
					this._Cake_ID = value;
					this.SendPropertyChanged("Cake_ID");
					this.OnCake_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time_comment", DbType="DateTime")]
		public System.Nullable<System.DateTime> Time_comment
		{
			get
			{
				return this._Time_comment;
			}
			set
			{
				if ((this._Time_comment != value))
				{
					this.OnTime_commentChanging(value);
					this.SendPropertyChanging();
					this._Time_comment = value;
					this.SendPropertyChanged("Time_comment");
					this.OnTime_commentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NVarChar(MAX)")]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_COMMENT", Storage="_Customer", ThisKey="Customer_ID", OtherKey="Customer_ID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.COMMENTs.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.COMMENTs.Add(this);
						this._Customer_ID = value.Customer_ID;
					}
					else
					{
						this._Customer_ID = default(string);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cake_COMMENT", Storage="_Cake", ThisKey="Cake_ID", OtherKey="Cake_ID", IsForeignKey=true)]
		public Cake Cake
		{
			get
			{
				return this._Cake.Entity;
			}
			set
			{
				Cake previousValue = this._Cake.Entity;
				if (((previousValue != value) 
							|| (this._Cake.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cake.Entity = null;
						previousValue.COMMENTs.Remove(this);
					}
					this._Cake.Entity = value;
					if ((value != null))
					{
						value.COMMENTs.Add(this);
						this._Cake_ID = value.Cake_ID;
					}
					else
					{
						this._Cake_ID = default(string);
					}
					this.SendPropertyChanged("Cake");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Customer_ID;
		
		private string _Customer_Name;
		
		private string _Customer_Phone;
		
		private string _Customer_Email;
		
		private string _Customer_Adress;
		
		private EntitySet<Cart> _Carts;
		
		private EntitySet<COMMENT> _COMMENTs;
		
		private EntitySet<Customer_Payment_Method> _Customer_Payment_Methods;
		
		private EntityRef<LoginSystem> _LoginSystem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomer_IDChanging(string value);
    partial void OnCustomer_IDChanged();
    partial void OnCustomer_NameChanging(string value);
    partial void OnCustomer_NameChanged();
    partial void OnCustomer_PhoneChanging(string value);
    partial void OnCustomer_PhoneChanged();
    partial void OnCustomer_EmailChanging(string value);
    partial void OnCustomer_EmailChanged();
    partial void OnCustomer_AdressChanging(string value);
    partial void OnCustomer_AdressChanged();
    #endregion
		
		public Customer()
		{
			this._Carts = new EntitySet<Cart>(new Action<Cart>(this.attach_Carts), new Action<Cart>(this.detach_Carts));
			this._COMMENTs = new EntitySet<COMMENT>(new Action<COMMENT>(this.attach_COMMENTs), new Action<COMMENT>(this.detach_COMMENTs));
			this._Customer_Payment_Methods = new EntitySet<Customer_Payment_Method>(new Action<Customer_Payment_Method>(this.attach_Customer_Payment_Methods), new Action<Customer_Payment_Method>(this.detach_Customer_Payment_Methods));
			this._LoginSystem = default(EntityRef<LoginSystem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Customer_ID
		{
			get
			{
				return this._Customer_ID;
			}
			set
			{
				if ((this._Customer_ID != value))
				{
					if (this._LoginSystem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomer_IDChanging(value);
					this.SendPropertyChanging();
					this._Customer_ID = value;
					this.SendPropertyChanged("Customer_ID");
					this.OnCustomer_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_Name", DbType="NVarChar(20)")]
		public string Customer_Name
		{
			get
			{
				return this._Customer_Name;
			}
			set
			{
				if ((this._Customer_Name != value))
				{
					this.OnCustomer_NameChanging(value);
					this.SendPropertyChanging();
					this._Customer_Name = value;
					this.SendPropertyChanged("Customer_Name");
					this.OnCustomer_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_Phone", DbType="Char(12)")]
		public string Customer_Phone
		{
			get
			{
				return this._Customer_Phone;
			}
			set
			{
				if ((this._Customer_Phone != value))
				{
					this.OnCustomer_PhoneChanging(value);
					this.SendPropertyChanging();
					this._Customer_Phone = value;
					this.SendPropertyChanged("Customer_Phone");
					this.OnCustomer_PhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_Email", DbType="VarChar(30)")]
		public string Customer_Email
		{
			get
			{
				return this._Customer_Email;
			}
			set
			{
				if ((this._Customer_Email != value))
				{
					this.OnCustomer_EmailChanging(value);
					this.SendPropertyChanging();
					this._Customer_Email = value;
					this.SendPropertyChanged("Customer_Email");
					this.OnCustomer_EmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_Adress", DbType="NVarChar(MAX)")]
		public string Customer_Adress
		{
			get
			{
				return this._Customer_Adress;
			}
			set
			{
				if ((this._Customer_Adress != value))
				{
					this.OnCustomer_AdressChanging(value);
					this.SendPropertyChanging();
					this._Customer_Adress = value;
					this.SendPropertyChanged("Customer_Adress");
					this.OnCustomer_AdressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Cart", Storage="_Carts", ThisKey="Customer_ID", OtherKey="Customer_ID")]
		public EntitySet<Cart> Carts
		{
			get
			{
				return this._Carts;
			}
			set
			{
				this._Carts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_COMMENT", Storage="_COMMENTs", ThisKey="Customer_ID", OtherKey="Customer_ID")]
		public EntitySet<COMMENT> COMMENTs
		{
			get
			{
				return this._COMMENTs;
			}
			set
			{
				this._COMMENTs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Customer_Payment_Method", Storage="_Customer_Payment_Methods", ThisKey="Customer_ID", OtherKey="Customer_ID")]
		public EntitySet<Customer_Payment_Method> Customer_Payment_Methods
		{
			get
			{
				return this._Customer_Payment_Methods;
			}
			set
			{
				this._Customer_Payment_Methods.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LoginSystem_Customer", Storage="_LoginSystem", ThisKey="Customer_ID", OtherKey="ID", IsForeignKey=true)]
		public LoginSystem LoginSystem
		{
			get
			{
				return this._LoginSystem.Entity;
			}
			set
			{
				LoginSystem previousValue = this._LoginSystem.Entity;
				if (((previousValue != value) 
							|| (this._LoginSystem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LoginSystem.Entity = null;
						previousValue.Customer = null;
					}
					this._LoginSystem.Entity = value;
					if ((value != null))
					{
						value.Customer = this;
						this._Customer_ID = value.ID;
					}
					else
					{
						this._Customer_ID = default(string);
					}
					this.SendPropertyChanged("LoginSystem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Carts(Cart entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Carts(Cart entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_COMMENTs(COMMENT entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_COMMENTs(COMMENT entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
		
		private void attach_Customer_Payment_Methods(Customer_Payment_Method entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Customer_Payment_Methods(Customer_Payment_Method entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer_Payment_Methods")]
	public partial class Customer_Payment_Method : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Customer_Payment_ID;
		
		private string _Customer_ID;
		
		private string _Payment_Menthod_Code;
		
		private string _Card_Number;
		
		private string _Date_from;
		
		private string _Date_to;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Payment_Method> _Payment_Method;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomer_Payment_IDChanging(string value);
    partial void OnCustomer_Payment_IDChanged();
    partial void OnCustomer_IDChanging(string value);
    partial void OnCustomer_IDChanged();
    partial void OnPayment_Menthod_CodeChanging(string value);
    partial void OnPayment_Menthod_CodeChanged();
    partial void OnCard_NumberChanging(string value);
    partial void OnCard_NumberChanged();
    partial void OnDate_fromChanging(string value);
    partial void OnDate_fromChanged();
    partial void OnDate_toChanging(string value);
    partial void OnDate_toChanged();
    #endregion
		
		public Customer_Payment_Method()
		{
			this._Customer = default(EntityRef<Customer>);
			this._Payment_Method = default(EntityRef<Payment_Method>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_Payment_ID", DbType="Char(7) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Customer_Payment_ID
		{
			get
			{
				return this._Customer_Payment_ID;
			}
			set
			{
				if ((this._Customer_Payment_ID != value))
				{
					this.OnCustomer_Payment_IDChanging(value);
					this.SendPropertyChanging();
					this._Customer_Payment_ID = value;
					this.SendPropertyChanged("Customer_Payment_ID");
					this.OnCustomer_Payment_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_ID", DbType="VarChar(50)")]
		public string Customer_ID
		{
			get
			{
				return this._Customer_ID;
			}
			set
			{
				if ((this._Customer_ID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomer_IDChanging(value);
					this.SendPropertyChanging();
					this._Customer_ID = value;
					this.SendPropertyChanged("Customer_ID");
					this.OnCustomer_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Payment_Menthod_Code", DbType="Char(2)")]
		public string Payment_Menthod_Code
		{
			get
			{
				return this._Payment_Menthod_Code;
			}
			set
			{
				if ((this._Payment_Menthod_Code != value))
				{
					if (this._Payment_Method.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPayment_Menthod_CodeChanging(value);
					this.SendPropertyChanging();
					this._Payment_Menthod_Code = value;
					this.SendPropertyChanged("Payment_Menthod_Code");
					this.OnPayment_Menthod_CodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Card_Number", DbType="Char(16)")]
		public string Card_Number
		{
			get
			{
				return this._Card_Number;
			}
			set
			{
				if ((this._Card_Number != value))
				{
					this.OnCard_NumberChanging(value);
					this.SendPropertyChanging();
					this._Card_Number = value;
					this.SendPropertyChanged("Card_Number");
					this.OnCard_NumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date_from", DbType="Char(4)")]
		public string Date_from
		{
			get
			{
				return this._Date_from;
			}
			set
			{
				if ((this._Date_from != value))
				{
					this.OnDate_fromChanging(value);
					this.SendPropertyChanging();
					this._Date_from = value;
					this.SendPropertyChanged("Date_from");
					this.OnDate_fromChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date_to", DbType="Char(4)")]
		public string Date_to
		{
			get
			{
				return this._Date_to;
			}
			set
			{
				if ((this._Date_to != value))
				{
					this.OnDate_toChanging(value);
					this.SendPropertyChanging();
					this._Date_to = value;
					this.SendPropertyChanged("Date_to");
					this.OnDate_toChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Customer_Payment_Method", Storage="_Customer", ThisKey="Customer_ID", OtherKey="Customer_ID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Customer_Payment_Methods.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Customer_Payment_Methods.Add(this);
						this._Customer_ID = value.Customer_ID;
					}
					else
					{
						this._Customer_ID = default(string);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Payment_Method_Customer_Payment_Method", Storage="_Payment_Method", ThisKey="Payment_Menthod_Code", OtherKey="Payment_Method_Code", IsForeignKey=true)]
		public Payment_Method Payment_Method
		{
			get
			{
				return this._Payment_Method.Entity;
			}
			set
			{
				Payment_Method previousValue = this._Payment_Method.Entity;
				if (((previousValue != value) 
							|| (this._Payment_Method.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Payment_Method.Entity = null;
						previousValue.Customer_Payment_Methods.Remove(this);
					}
					this._Payment_Method.Entity = value;
					if ((value != null))
					{
						value.Customer_Payment_Methods.Add(this);
						this._Payment_Menthod_Code = value.Payment_Method_Code;
					}
					else
					{
						this._Payment_Menthod_Code = default(string);
					}
					this.SendPropertyChanged("Payment_Method");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Driver")]
	public partial class Driver : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Driver_ID;
		
		private string _Driver_Name;
		
		private string _Driver_Phone;
		
		private EntitySet<Cart> _Carts;
		
		private EntityRef<LoginSystem> _LoginSystem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDriver_IDChanging(string value);
    partial void OnDriver_IDChanged();
    partial void OnDriver_NameChanging(string value);
    partial void OnDriver_NameChanged();
    partial void OnDriver_PhoneChanging(string value);
    partial void OnDriver_PhoneChanged();
    #endregion
		
		public Driver()
		{
			this._Carts = new EntitySet<Cart>(new Action<Cart>(this.attach_Carts), new Action<Cart>(this.detach_Carts));
			this._LoginSystem = default(EntityRef<LoginSystem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Driver_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Driver_ID
		{
			get
			{
				return this._Driver_ID;
			}
			set
			{
				if ((this._Driver_ID != value))
				{
					if (this._LoginSystem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDriver_IDChanging(value);
					this.SendPropertyChanging();
					this._Driver_ID = value;
					this.SendPropertyChanged("Driver_ID");
					this.OnDriver_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Driver_Name", DbType="NVarChar(30)")]
		public string Driver_Name
		{
			get
			{
				return this._Driver_Name;
			}
			set
			{
				if ((this._Driver_Name != value))
				{
					this.OnDriver_NameChanging(value);
					this.SendPropertyChanging();
					this._Driver_Name = value;
					this.SendPropertyChanged("Driver_Name");
					this.OnDriver_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Driver_Phone", DbType="Char(12)")]
		public string Driver_Phone
		{
			get
			{
				return this._Driver_Phone;
			}
			set
			{
				if ((this._Driver_Phone != value))
				{
					this.OnDriver_PhoneChanging(value);
					this.SendPropertyChanging();
					this._Driver_Phone = value;
					this.SendPropertyChanged("Driver_Phone");
					this.OnDriver_PhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Driver_Cart", Storage="_Carts", ThisKey="Driver_ID", OtherKey="Driver_ID")]
		public EntitySet<Cart> Carts
		{
			get
			{
				return this._Carts;
			}
			set
			{
				this._Carts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LoginSystem_Driver", Storage="_LoginSystem", ThisKey="Driver_ID", OtherKey="ID", IsForeignKey=true)]
		public LoginSystem LoginSystem
		{
			get
			{
				return this._LoginSystem.Entity;
			}
			set
			{
				LoginSystem previousValue = this._LoginSystem.Entity;
				if (((previousValue != value) 
							|| (this._LoginSystem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LoginSystem.Entity = null;
						previousValue.Driver = null;
					}
					this._LoginSystem.Entity = value;
					if ((value != null))
					{
						value.Driver = this;
						this._Driver_ID = value.ID;
					}
					else
					{
						this._Driver_ID = default(string);
					}
					this.SendPropertyChanged("LoginSystem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Carts(Cart entity)
		{
			this.SendPropertyChanging();
			entity.Driver = this;
		}
		
		private void detach_Carts(Cart entity)
		{
			this.SendPropertyChanging();
			entity.Driver = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LoginSystem")]
	public partial class LoginSystem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ID;
		
		private string _Pass;
		
		private System.Nullable<int> _ID_Rule;
		
		private EntityRef<Chef> _Chef;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Driver> _Driver;
		
		private EntityRef<Manager> _Manager;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(string value);
    partial void OnIDChanged();
    partial void OnPassChanging(string value);
    partial void OnPassChanged();
    partial void OnID_RuleChanging(System.Nullable<int> value);
    partial void OnID_RuleChanged();
    #endregion
		
		public LoginSystem()
		{
			this._Chef = default(EntityRef<Chef>);
			this._Customer = default(EntityRef<Customer>);
			this._Driver = default(EntityRef<Driver>);
			this._Manager = default(EntityRef<Manager>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pass", DbType="VarChar(32)")]
		public string Pass
		{
			get
			{
				return this._Pass;
			}
			set
			{
				if ((this._Pass != value))
				{
					this.OnPassChanging(value);
					this.SendPropertyChanging();
					this._Pass = value;
					this.SendPropertyChanged("Pass");
					this.OnPassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Rule", DbType="Int")]
		public System.Nullable<int> ID_Rule
		{
			get
			{
				return this._ID_Rule;
			}
			set
			{
				if ((this._ID_Rule != value))
				{
					this.OnID_RuleChanging(value);
					this.SendPropertyChanging();
					this._ID_Rule = value;
					this.SendPropertyChanged("ID_Rule");
					this.OnID_RuleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LoginSystem_Chef", Storage="_Chef", ThisKey="ID", OtherKey="Chef_ID", IsUnique=true, IsForeignKey=false)]
		public Chef Chef
		{
			get
			{
				return this._Chef.Entity;
			}
			set
			{
				Chef previousValue = this._Chef.Entity;
				if (((previousValue != value) 
							|| (this._Chef.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Chef.Entity = null;
						previousValue.LoginSystem = null;
					}
					this._Chef.Entity = value;
					if ((value != null))
					{
						value.LoginSystem = this;
					}
					this.SendPropertyChanged("Chef");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LoginSystem_Customer", Storage="_Customer", ThisKey="ID", OtherKey="Customer_ID", IsUnique=true, IsForeignKey=false)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.LoginSystem = null;
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.LoginSystem = this;
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LoginSystem_Driver", Storage="_Driver", ThisKey="ID", OtherKey="Driver_ID", IsUnique=true, IsForeignKey=false)]
		public Driver Driver
		{
			get
			{
				return this._Driver.Entity;
			}
			set
			{
				Driver previousValue = this._Driver.Entity;
				if (((previousValue != value) 
							|| (this._Driver.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Driver.Entity = null;
						previousValue.LoginSystem = null;
					}
					this._Driver.Entity = value;
					if ((value != null))
					{
						value.LoginSystem = this;
					}
					this.SendPropertyChanged("Driver");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LoginSystem_Manager", Storage="_Manager", ThisKey="ID", OtherKey="Manager_ID", IsUnique=true, IsForeignKey=false)]
		public Manager Manager
		{
			get
			{
				return this._Manager.Entity;
			}
			set
			{
				Manager previousValue = this._Manager.Entity;
				if (((previousValue != value) 
							|| (this._Manager.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Manager.Entity = null;
						previousValue.LoginSystem = null;
					}
					this._Manager.Entity = value;
					if ((value != null))
					{
						value.LoginSystem = this;
					}
					this.SendPropertyChanged("Manager");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Manager")]
	public partial class Manager : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Manager_ID;
		
		private string _Manager_Name;
		
		private string _Manager_Phone;
		
		private EntityRef<LoginSystem> _LoginSystem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnManager_IDChanging(string value);
    partial void OnManager_IDChanged();
    partial void OnManager_NameChanging(string value);
    partial void OnManager_NameChanged();
    partial void OnManager_PhoneChanging(string value);
    partial void OnManager_PhoneChanged();
    #endregion
		
		public Manager()
		{
			this._LoginSystem = default(EntityRef<LoginSystem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Manager_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Manager_ID
		{
			get
			{
				return this._Manager_ID;
			}
			set
			{
				if ((this._Manager_ID != value))
				{
					if (this._LoginSystem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnManager_IDChanging(value);
					this.SendPropertyChanging();
					this._Manager_ID = value;
					this.SendPropertyChanged("Manager_ID");
					this.OnManager_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Manager_Name", DbType="NVarChar(30)")]
		public string Manager_Name
		{
			get
			{
				return this._Manager_Name;
			}
			set
			{
				if ((this._Manager_Name != value))
				{
					this.OnManager_NameChanging(value);
					this.SendPropertyChanging();
					this._Manager_Name = value;
					this.SendPropertyChanged("Manager_Name");
					this.OnManager_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Manager_Phone", DbType="Char(12)")]
		public string Manager_Phone
		{
			get
			{
				return this._Manager_Phone;
			}
			set
			{
				if ((this._Manager_Phone != value))
				{
					this.OnManager_PhoneChanging(value);
					this.SendPropertyChanging();
					this._Manager_Phone = value;
					this.SendPropertyChanged("Manager_Phone");
					this.OnManager_PhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LoginSystem_Manager", Storage="_LoginSystem", ThisKey="Manager_ID", OtherKey="ID", IsForeignKey=true)]
		public LoginSystem LoginSystem
		{
			get
			{
				return this._LoginSystem.Entity;
			}
			set
			{
				LoginSystem previousValue = this._LoginSystem.Entity;
				if (((previousValue != value) 
							|| (this._LoginSystem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LoginSystem.Entity = null;
						previousValue.Manager = null;
					}
					this._LoginSystem.Entity = value;
					if ((value != null))
					{
						value.Manager = this;
						this._Manager_ID = value.ID;
					}
					else
					{
						this._Manager_ID = default(string);
					}
					this.SendPropertyChanged("LoginSystem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Payment_Methods")]
	public partial class Payment_Method : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Payment_Method_Code;
		
		private string _Payment_Method_Descripsion;
		
		private EntitySet<Customer_Payment_Method> _Customer_Payment_Methods;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPayment_Method_CodeChanging(string value);
    partial void OnPayment_Method_CodeChanged();
    partial void OnPayment_Method_DescripsionChanging(string value);
    partial void OnPayment_Method_DescripsionChanged();
    #endregion
		
		public Payment_Method()
		{
			this._Customer_Payment_Methods = new EntitySet<Customer_Payment_Method>(new Action<Customer_Payment_Method>(this.attach_Customer_Payment_Methods), new Action<Customer_Payment_Method>(this.detach_Customer_Payment_Methods));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Payment_Method_Code", DbType="Char(2) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Payment_Method_Code
		{
			get
			{
				return this._Payment_Method_Code;
			}
			set
			{
				if ((this._Payment_Method_Code != value))
				{
					this.OnPayment_Method_CodeChanging(value);
					this.SendPropertyChanging();
					this._Payment_Method_Code = value;
					this.SendPropertyChanged("Payment_Method_Code");
					this.OnPayment_Method_CodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Payment_Method_Descripsion", DbType="NVarChar(30)")]
		public string Payment_Method_Descripsion
		{
			get
			{
				return this._Payment_Method_Descripsion;
			}
			set
			{
				if ((this._Payment_Method_Descripsion != value))
				{
					this.OnPayment_Method_DescripsionChanging(value);
					this.SendPropertyChanging();
					this._Payment_Method_Descripsion = value;
					this.SendPropertyChanged("Payment_Method_Descripsion");
					this.OnPayment_Method_DescripsionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Payment_Method_Customer_Payment_Method", Storage="_Customer_Payment_Methods", ThisKey="Payment_Method_Code", OtherKey="Payment_Menthod_Code")]
		public EntitySet<Customer_Payment_Method> Customer_Payment_Methods
		{
			get
			{
				return this._Customer_Payment_Methods;
			}
			set
			{
				this._Customer_Payment_Methods.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Customer_Payment_Methods(Customer_Payment_Method entity)
		{
			this.SendPropertyChanging();
			entity.Payment_Method = this;
		}
		
		private void detach_Customer_Payment_Methods(Customer_Payment_Method entity)
		{
			this.SendPropertyChanging();
			entity.Payment_Method = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cake_Type")]
	public partial class Cake_Type : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Cake_Type_Code;
		
		private string _Cake_Type_Name;
		
		private string _Meta_Title;
		
		private System.Nullable<int> _The_Order;
		
		private System.Nullable<bool> _Status;
		
		private EntitySet<Cake> _Cakes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCake_Type_CodeChanging(string value);
    partial void OnCake_Type_CodeChanged();
    partial void OnCake_Type_NameChanging(string value);
    partial void OnCake_Type_NameChanged();
    partial void OnMeta_TitleChanging(string value);
    partial void OnMeta_TitleChanged();
    partial void OnThe_OrderChanging(System.Nullable<int> value);
    partial void OnThe_OrderChanged();
    partial void OnStatusChanging(System.Nullable<bool> value);
    partial void OnStatusChanged();
    #endregion
		
		public Cake_Type()
		{
			this._Cakes = new EntitySet<Cake>(new Action<Cake>(this.attach_Cakes), new Action<Cake>(this.detach_Cakes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cake_Type_Code", DbType="Char(7) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Cake_Type_Code
		{
			get
			{
				return this._Cake_Type_Code;
			}
			set
			{
				if ((this._Cake_Type_Code != value))
				{
					this.OnCake_Type_CodeChanging(value);
					this.SendPropertyChanging();
					this._Cake_Type_Code = value;
					this.SendPropertyChanged("Cake_Type_Code");
					this.OnCake_Type_CodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cake_Type_Name", DbType="NVarChar(50)")]
		public string Cake_Type_Name
		{
			get
			{
				return this._Cake_Type_Name;
			}
			set
			{
				if ((this._Cake_Type_Name != value))
				{
					this.OnCake_Type_NameChanging(value);
					this.SendPropertyChanging();
					this._Cake_Type_Name = value;
					this.SendPropertyChanged("Cake_Type_Name");
					this.OnCake_Type_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Meta_Title", DbType="NVarChar(50)")]
		public string Meta_Title
		{
			get
			{
				return this._Meta_Title;
			}
			set
			{
				if ((this._Meta_Title != value))
				{
					this.OnMeta_TitleChanging(value);
					this.SendPropertyChanging();
					this._Meta_Title = value;
					this.SendPropertyChanged("Meta_Title");
					this.OnMeta_TitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_The_Order", DbType="Int")]
		public System.Nullable<int> The_Order
		{
			get
			{
				return this._The_Order;
			}
			set
			{
				if ((this._The_Order != value))
				{
					this.OnThe_OrderChanging(value);
					this.SendPropertyChanging();
					this._The_Order = value;
					this.SendPropertyChanged("The_Order");
					this.OnThe_OrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Bit")]
		public System.Nullable<bool> Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cake_Type_Cake", Storage="_Cakes", ThisKey="Cake_Type_Code", OtherKey="Cake_Type_Code")]
		public EntitySet<Cake> Cakes
		{
			get
			{
				return this._Cakes;
			}
			set
			{
				this._Cakes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cakes(Cake entity)
		{
			this.SendPropertyChanging();
			entity.Cake_Type = this;
		}
		
		private void detach_Cakes(Cake entity)
		{
			this.SendPropertyChanging();
			entity.Cake_Type = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cakes")]
	public partial class Cake : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Cake_ID;
		
		private string _Cake_Name;
		
		private string _Cake_Type_Code;
		
		private System.Nullable<double> _Cake_Price;
		
		private System.Nullable<double> _Discount;
		
		private string _Cake_decripsion;
		
		private System.Nullable<int> _Amount;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private System.Nullable<int> _Sold;
		
		private EntitySet<Cake_Image> _Cake_Images;
		
		private EntitySet<Cart_Item> _Cart_Items;
		
		private EntitySet<COMMENT> _COMMENTs;
		
		private EntityRef<Cake_Type> _Cake_Type;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCake_IDChanging(string value);
    partial void OnCake_IDChanged();
    partial void OnCake_NameChanging(string value);
    partial void OnCake_NameChanged();
    partial void OnCake_Type_CodeChanging(string value);
    partial void OnCake_Type_CodeChanged();
    partial void OnCake_PriceChanging(System.Nullable<double> value);
    partial void OnCake_PriceChanged();
    partial void OnDiscountChanging(System.Nullable<double> value);
    partial void OnDiscountChanged();
    partial void OnCake_decripsionChanging(string value);
    partial void OnCake_decripsionChanged();
    partial void OnAmountChanging(System.Nullable<int> value);
    partial void OnAmountChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnSoldChanging(System.Nullable<int> value);
    partial void OnSoldChanged();
    #endregion
		
		public Cake()
		{
			this._Cake_Images = new EntitySet<Cake_Image>(new Action<Cake_Image>(this.attach_Cake_Images), new Action<Cake_Image>(this.detach_Cake_Images));
			this._Cart_Items = new EntitySet<Cart_Item>(new Action<Cart_Item>(this.attach_Cart_Items), new Action<Cart_Item>(this.detach_Cart_Items));
			this._COMMENTs = new EntitySet<COMMENT>(new Action<COMMENT>(this.attach_COMMENTs), new Action<COMMENT>(this.detach_COMMENTs));
			this._Cake_Type = default(EntityRef<Cake_Type>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cake_ID", DbType="Char(5) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Cake_ID
		{
			get
			{
				return this._Cake_ID;
			}
			set
			{
				if ((this._Cake_ID != value))
				{
					this.OnCake_IDChanging(value);
					this.SendPropertyChanging();
					this._Cake_ID = value;
					this.SendPropertyChanged("Cake_ID");
					this.OnCake_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cake_Name", DbType="NVarChar(50)")]
		public string Cake_Name
		{
			get
			{
				return this._Cake_Name;
			}
			set
			{
				if ((this._Cake_Name != value))
				{
					this.OnCake_NameChanging(value);
					this.SendPropertyChanging();
					this._Cake_Name = value;
					this.SendPropertyChanged("Cake_Name");
					this.OnCake_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cake_Type_Code", DbType="Char(7)")]
		public string Cake_Type_Code
		{
			get
			{
				return this._Cake_Type_Code;
			}
			set
			{
				if ((this._Cake_Type_Code != value))
				{
					if (this._Cake_Type.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCake_Type_CodeChanging(value);
					this.SendPropertyChanging();
					this._Cake_Type_Code = value;
					this.SendPropertyChanged("Cake_Type_Code");
					this.OnCake_Type_CodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cake_Price", DbType="Float")]
		public System.Nullable<double> Cake_Price
		{
			get
			{
				return this._Cake_Price;
			}
			set
			{
				if ((this._Cake_Price != value))
				{
					this.OnCake_PriceChanging(value);
					this.SendPropertyChanging();
					this._Cake_Price = value;
					this.SendPropertyChanged("Cake_Price");
					this.OnCake_PriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discount", DbType="Float")]
		public System.Nullable<double> Discount
		{
			get
			{
				return this._Discount;
			}
			set
			{
				if ((this._Discount != value))
				{
					this.OnDiscountChanging(value);
					this.SendPropertyChanging();
					this._Discount = value;
					this.SendPropertyChanged("Discount");
					this.OnDiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Cake_decripsion", DbType="NVarChar(50)")]
		public string Cake_decripsion
		{
			get
			{
				return this._Cake_decripsion;
			}
			set
			{
				if ((this._Cake_decripsion != value))
				{
					this.OnCake_decripsionChanging(value);
					this.SendPropertyChanging();
					this._Cake_decripsion = value;
					this.SendPropertyChanged("Cake_decripsion");
					this.OnCake_decripsionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Int")]
		public System.Nullable<int> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="Date")]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sold", DbType="Int")]
		public System.Nullable<int> Sold
		{
			get
			{
				return this._Sold;
			}
			set
			{
				if ((this._Sold != value))
				{
					this.OnSoldChanging(value);
					this.SendPropertyChanging();
					this._Sold = value;
					this.SendPropertyChanged("Sold");
					this.OnSoldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cake_Cake_Image", Storage="_Cake_Images", ThisKey="Cake_ID", OtherKey="Cake_ID")]
		public EntitySet<Cake_Image> Cake_Images
		{
			get
			{
				return this._Cake_Images;
			}
			set
			{
				this._Cake_Images.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cake_Cart_Item", Storage="_Cart_Items", ThisKey="Cake_ID", OtherKey="Cake_ID")]
		public EntitySet<Cart_Item> Cart_Items
		{
			get
			{
				return this._Cart_Items;
			}
			set
			{
				this._Cart_Items.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cake_COMMENT", Storage="_COMMENTs", ThisKey="Cake_ID", OtherKey="Cake_ID")]
		public EntitySet<COMMENT> COMMENTs
		{
			get
			{
				return this._COMMENTs;
			}
			set
			{
				this._COMMENTs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cake_Type_Cake", Storage="_Cake_Type", ThisKey="Cake_Type_Code", OtherKey="Cake_Type_Code", IsForeignKey=true)]
		public Cake_Type Cake_Type
		{
			get
			{
				return this._Cake_Type.Entity;
			}
			set
			{
				Cake_Type previousValue = this._Cake_Type.Entity;
				if (((previousValue != value) 
							|| (this._Cake_Type.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cake_Type.Entity = null;
						previousValue.Cakes.Remove(this);
					}
					this._Cake_Type.Entity = value;
					if ((value != null))
					{
						value.Cakes.Add(this);
						this._Cake_Type_Code = value.Cake_Type_Code;
					}
					else
					{
						this._Cake_Type_Code = default(string);
					}
					this.SendPropertyChanged("Cake_Type");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cake_Images(Cake_Image entity)
		{
			this.SendPropertyChanging();
			entity.Cake = this;
		}
		
		private void detach_Cake_Images(Cake_Image entity)
		{
			this.SendPropertyChanging();
			entity.Cake = null;
		}
		
		private void attach_Cart_Items(Cart_Item entity)
		{
			this.SendPropertyChanging();
			entity.Cake = this;
		}
		
		private void detach_Cart_Items(Cart_Item entity)
		{
			this.SendPropertyChanging();
			entity.Cake = null;
		}
		
		private void attach_COMMENTs(COMMENT entity)
		{
			this.SendPropertyChanging();
			entity.Cake = this;
		}
		
		private void detach_COMMENTs(COMMENT entity)
		{
			this.SendPropertyChanging();
			entity.Cake = null;
		}
	}
	
	public partial class check_loginResult
	{
		
		private string _ID;
		
		public check_loginResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
